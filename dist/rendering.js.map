{"version":3,"sources":["../src/rendering.js"],"names":["link","scope","elem","attrs","ctrl","data","panel","matrix","find","$tooltip","$","events","on","render","renderingCompleted","setElementHeight","height","row","_","isString","parseInt","replace","title","css","e","margin","top","right","bottom","left","srcs","length","width","dsts","cellWidth","Math","floor","cellHeight","matrix_svg","d3","select","append","attr","y_labels","selectAll","enter","text","d","i","style","x_labels","cells","col"],"mappings":"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","file":"rendering.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\nimport 'jquery.flot';\nimport 'jquery.flot.pie';\nimport * as d3 from 'd3';\n\n\nexport default function link(scope, elem, attrs, ctrl) {\n  var data, panel, matrix;\n  elem = elem.find('.matrix-panel');\n  var $tooltip = $('<div id=\"tooltip\">');\n\n  ctrl.events.on('render', function() {\n    render();\n    ctrl.renderingCompleted();\n  });\n\n  function setElementHeight() {\n    try {\n      var height = ctrl.height || panel.height || ctrl.row.height;\n      if (_.isString(height)) {\n        height = parseInt(height.replace('px', ''), 10);\n      }\n\n      height -= 5; // padding\n      height -= panel.title ? 24 : 9; // subtract panel title bar\n\n      elem.css('height', height + 'px');\n\n      return true;\n    } catch(e) { // IE throws errors sometimes\n      return false;\n    }\n  }\n\n  function render() {\n    if (!ctrl.data) { return; }\n\n    data = ctrl.data;\n    panel = ctrl.panel;\n    matrix = ctrl.matrix;\n\n    // These margins would need to be dynamic based on the axis labels\n    var margin = { top: 50, right: 0, bottom: 100, left: 50 },\n        height = (20 * matrix.srcs.length) + margin.top,\n        width = (20 * matrix.dsts.length) + margin.left,\n        cellWidth = Math.floor(width / matrix.dsts.length),\n        cellHeight = Math.floor(height / matrix.srcs.length);\n\n    var matrix_svg = d3.select(elem[0]).append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        // May need something here about margins, but I don't know why\n        // Seems to be for shifting the position to add margins, but unsure why\n        // especially if it's the top level item\n        // It seems like by default this actually goes negatively to the left outside\n        // of the SVG canvas.\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var y_labels = matrix_svg.selectAll('.yLabel')\n        .data(ctrl.matrix.srcs)\n        .enter() // Initial join of data, creates an element for each item in data\n        .append('text')  // Does this for each element in data\n            .text(function (d) { return d; })  // The value should be the data itself\n            .attr('x', 0)  // Because this is the y-axis labels\n            // Determine the y coordinates based on index and cell heights\n            // uses a function, that gets provided the data element and index\n            .attr('y', function (d, i) { return i * cellHeight; } )\n            .style('text-anchor', 'end') // Attach the end of the text to the x/y point\n            // Another transform may need to go here, but unclear why\n            // and what the values mean\n            // It seems like this is to providing a gap between the label and the edge\n            // of the grid, plus moving the value a bit so it's centered for the cell\n            // locations.\n            .attr(\"transform\", \"translate(-6,\" + cellHeight / 1.5 + \")\")\n            // This is used for styling, so these should refer to CSS\n            .attr(\"class\", \"yLabel mono axis\");\n\n    // Pretty similar deal for the x-axis\n    var x_labels = matrix_svg.selectAll('.xLabel')\n        .data(ctrl.matrix.dsts)\n        .enter()\n        .append('text')\n            .text(function (d) { return d; })\n            // .attr('x', function (d, i) { return i * cellWidth; } )\n            // .attr('y', 0)\n            // Setting this because of the rotation, so it stays against the grid\n            .style(\"text-anchor\", \"end\")\n            // Need to do the transform in this way to account for how transforms are\n            // done against the origin coordinates. Thought still not entirely clear\n            // why this works.\n            .attr(\"transform\", function (d, i) {\n                return \"translate(\" + ((i * cellWidth) + (cellWidth / 2)) + \", -6)rotate(90)\"\n            })\n            .attr(\"class\", \"xLabel mono axis\");\n\n    // STILL NEED TO ACTUALLY ADD THE DATA CELLS IN THE GRID\n    var cells = matrix_svg.selectAll('.grid-cell')\n        .data(ctrl.matrix.cells)\n        .enter()\n        .append('rect')\n            // To add text, I'd need a `g` to wrap, and then rect and text in it\n            .attr('x', function(d) { return d.row * cellWidth;})\n            .attr('y', function(d) { return d.col * cellHeight;})\n            .attr('class', 'grid-cell')\n            .attr('width', cellWidth)\n            .attr('height', cellHeight)\n            .style('fill', function(d) { return 'background-color' in d.style ? d.style['background-color'] : 'transparent';});\n  }\n}\n"]}