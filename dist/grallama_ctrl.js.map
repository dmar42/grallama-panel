{"version":3,"sources":["../src/grallama_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","rendering","GraLLAMACtrl","$scope","$injector","$rootScope","panelDefaults","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","strokeWidth","fontSize","combine","threshold","label","tooltipHover","colorBackground","colorValue","colors","thresholds","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","subItem","value","render","series","color","alias","data","parseSeries","matrix","parseMatrix","hash","srcs","Set","dsts","split","map","strVale","Number","trim","angular","forEach","datapoint","datavalue","stats","current","toFixed","src","dst","fgColor","bgColor","add","undefined","limit","i","style","row","col","Array","from","sort","push","toString","cell","Object","assign","serie","dataList","seriesHandler","seriesData","datapoints","target","flotpairs","getFlotPairs","scope","elem","attrs","ctrl","options","background","reverse","panelColorIndex","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AACAC,S;;AACAC,gB;;AACAC,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAEMC,Y;;;AAEX,8BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,kIACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,gBAAKC,UAAL,GAAkBA,UAAlB;;AAEA,cAAIC,gBAAgB;AAClBC,oBAAQ;AACNC,oBAAM,IADA,EACM;AACZC,sBAAQ;AAFF,aADU;AAKlBC,mBAAO,EALW;AAMlBC,wBAAY,IANM;AAOlBC,2BAAe,CAPG;AAQlBC,sBAAU,IARQ;AASlBC,qBAAS,CAAC,EAAD,CATS;AAUlBC,0BAAc,IAVI;AAWlBC,2BAAe,WAXG;AAYlBC,wBAAY,aAZM;AAalBC,yBAAa,EAbK;AAclBC,oBAAQ,OAdU;AAelBC,uBAAW,SAfO;AAgBlBC,yBAAa,CAhBK;AAiBlBC,sBAAU,KAjBQ;AAkBrBC,qBAAS;AACPC,yBAAW,GADJ;AAEPC,qBAAO;AAFA,aAlBY;AAsBlBC,0BAAc,KAtBI;AAuBlBC,6BAAiB,IAvBC;AAwBlBC,wBAAY,KAxBM;AAyBrBC,oBAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAzBa;AA0BlBC,wBAAY;AACZ;AACA;AACA;AACA;AACA;AA/BkB,WAApB;;AAkCAhC,YAAEiC,QAAF,CAAW,MAAKC,KAAhB,EAAuB1B,aAAvB;AACAR,YAAEiC,QAAF,CAAW,MAAKC,KAAL,CAAWzB,MAAtB,EAA8BD,cAAcC,MAA5C;;AAEA,gBAAK0B,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,MAAKC,QAAL,CAAcC,IAAd,OAAzB;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKG,cAAL,CAAoBD,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKI,WAAL,CAAiBF,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKG,cAAL,CAAoBD,IAApB,OAArC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKK,cAAL,CAAoBH,IAApB,OAAjC;AA7CyC;AA8C1C;;;;2CAEgB;AACf,iBAAKI,YAAL,CAAkB,MAAlB,EAA0B,wDAA1B,EAAoF,CAApF;AACA,iBAAKA,YAAL,CAAkB,SAAlB,EAA6B,2DAA7B,EAA0F,CAA1F;AACA,iBAAKC,WAAL,GAAmB1C,IAAI2C,cAAJ,EAAnB;AACD;;;wCAEaC,O,EAAS;AACrB,iBAAKX,KAAL,CAAWb,MAAX,GAAoBwB,QAAQC,KAA5B;AACA,iBAAKC,MAAL;AACD;;;wCAEa;AACZ,iBAAKC,MAAL,GAAc,EAAd;AACA,iBAAKD,MAAL;AACD;;;4CAEiBC,M,EAAQC,K,EAAO;AAC/BD,mBAAOC,KAAP,GAAeA,KAAf;AACA,iBAAKf,KAAL,CAAWd,WAAX,CAAuB4B,OAAOE,KAA9B,IAAuCF,OAAOC,KAA9C;AACA,iBAAKF,MAAL;AACD;;;qCAEU;AACT,iBAAKI,IAAL,GAAY,KAAKC,WAAL,CAAiB,KAAKJ,MAAtB,CAAZ;AACA,iBAAKK,MAAL,GAAc,KAAKC,WAAL,CAAiB,KAAKN,MAAtB,CAAd;AACD;;;sCAEWA,M,EAAQ;AAChB;AACA,gBAAIO,OAAO,EAAX;AACA,gBAAIC,OAAO,IAAIC,GAAJ,EAAX,CAHgB,CAGM;AACtB,gBAAIC,OAAO,IAAID,GAAJ,EAAX;AACA,gBAAI5B,kBAAkB,KAAKK,KAAL,CAAWL,eAAjC;AACA,gBAAIC,aAAa,KAAKI,KAAL,CAAWJ,UAA5B;AACA,gBAAIE,aAAa,KAAKE,KAAL,CAAWF,UAAX,CAAsB2B,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,CAAqC,UAASC,OAAT,EAAkB;AACtE,qBAAOC,OAAOD,QAAQE,IAAR,EAAP,CAAP;AACD,aAFgB,CAAjB;AAGH;AACA,gBAAIhC,SAAS,KAAKG,KAAL,CAAWH,MAAxB;AACGwB,iBAAK,MAAL,IAAe,EAAf;AACAA,iBAAK,OAAL,IAAgB,EAAhB;AACAS,oBAAQC,OAAR,CAAgBjB,MAAhB,EAAwB,UAASkB,SAAT,EAAoB;AACxC,kBAAIC,YAAYL,OAAOI,UAAUE,KAAV,CAAgBC,OAAvB,EAAgCC,OAAhC,CAAwC,CAAxC,CAAhB;;AADwC,0CAEvBJ,UAAUvC,KAAV,CAAgBgC,KAAhB,CAAsB,GAAtB,CAFuB;AAAA;AAAA,kBAEnCY,GAFmC;AAAA,kBAE9BC,GAF8B;;AAGxC,kBAAIC,OAAJ;AACA,kBAAIC,OAAJ;AACAlB,mBAAKmB,GAAL,CAASJ,GAAT;AACAb,mBAAKiB,GAAL,CAASH,GAAT;AACA,kBAAIjB,KAAK,MAAL,EAAagB,GAAb,MAAsBK,SAA1B,EAAqC;AACjCrB,qBAAK,MAAL,EAAagB,GAAb,IAAoB,EAApB;AACH;AACD,kBAAI1C,mBAAmBC,UAAvB,EAAmC;AAC/B,oBAAImB,QAAQlB,OAAO,CAAP,CAAZ,CAD+B,CACR;AACvBiC,wBAAQC,OAAR,CAAgBjC,UAAhB,EAA4B,UAAS6C,KAAT,EAAgBC,CAAhB,EAAmB;AAC7C,sBAAIX,aAAaU,KAAjB,EAAwB;AAAE5B,4BAAQlB,OAAO+C,IAAE,CAAT,CAAR;AAAsB;AACjD,iBAFD;AAGA,oBAAIjD,eAAJ,EAAqB;AAAE6C,4BAAUzB,KAAV;AAAkB;AACzC,oBAAInB,UAAJ,EAAgB;AAAE2C,4BAAUxB,KAAV;AAAkB;AACvC;AACDM,mBAAK,MAAL,EAAagB,GAAb,EAAkBC,GAAlB,IAAyB;AACrB1B,uBAAOqB,SADc;AAErBY,uBAAO;AACL,2BAASN,OADJ;AAEL,sCAAoBC;AAFf;AAFc,eAAzB;AAOH,aAzBD;;AA2BA;AACA,gBAAIM,MAAM,CAAV;AACA,gBAAIC,MAAM,CAAV;AA3CgB;AAAA;AAAA;;AAAA;AA4ChB,mCAAgBC,MAAMC,IAAN,CAAWzB,IAAX,EAAiB0B,IAAjB,EAAhB,8HAAyC;AAAA,oBAAhCZ,GAAgC;;AACvCS,sBADuC,CAC/B;AACR1B,qBAAK,OAAL,EAAc8B,IAAd,CAAmB;AACjBvC,yBAAO0B,GADU;AAEjBO,yBAAO;AACL,gCAAYC,IAAIM,QAAJ,EADP;AAEL,mCAAeL,IAAIK,QAAJ;AACf;AACA;AAJK;AAFU,iBAAnB;AASD;;AAED;AACA;AA1DgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA2DhB,oCAAgBJ,MAAMC,IAAN,CAAW3B,IAAX,EAAiB4B,IAAjB,EAAhB,mIAAyC;AAAA,oBAAhCb,GAAgC;;AACvCS;AACAC,sBAAM,CAAN,CAFuC,CAE9B;AACT;AACA1B,qBAAK,OAAL,EAAc8B,IAAd,CAAmB;AACjBvC,yBAAOyB,GADU;AAEjBQ,yBAAO;AACL,gCAAYC,IAAIM,QAAJ,EADP;AAEL,mCAAeL,IAAIK,QAAJ,EAFV;AAGL,mCAAe,QAHV,EAGqB;AAC1B,kCAAc,OAJT,CAImB;AAJnB;AAFU,iBAAnB;AAJuC;AAAA;AAAA;;AAAA;AAavC,wCAAgBJ,MAAMC,IAAN,CAAWzB,IAAX,EAAiB0B,IAAjB,EAAhB,mIAAyC;AAAA,wBAAhCZ,IAAgC;;AACvCS;AACA;AACA,wBAAIM,OAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBlC,KAAK,MAAL,EAAagB,GAAb,EAAkBC,IAAlB,CAAlB,CAAX;AACAe,yBAAK,SAAL,IAAkB,KAAKrD,KAAL,CAAWN,YAA7B;AACA2D,yBAAK,KAAL,IAAchB,GAAd;AACAgB,yBAAK,KAAL,IAAcf,IAAd;AACA;AACA,wBAAI,EAAE,WAAWe,IAAb,CAAJ,EAAwB;AACtBA,2BAAK,OAAL,IAAgB,EAAhB;AACD;AACD;AACAA,yBAAK,OAAL,EAAc,UAAd,IAA4BP,IAAIM,QAAJ,EAA5B;AACAC,yBAAK,OAAL,EAAc,aAAd,IAA+BN,IAAIK,QAAJ,EAA/B;AACA;AACA;AACA;AACA;AACA/B,yBAAK,OAAL,EAAc8B,IAAd,CAAmBE,IAAnB;AACD;AAhCsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCxC;;AAED;AA9FgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+FhBhC,iBAAK,MAAL,IAAe2B,MAAMC,IAAN,CAAWzB,IAAX,EAAiB0B,IAAjB,EAAf;AACA,mBAAO7B,IAAP;AACH;;;sCAEWP,M,EAAQ;AAAA;;AAClB,mBAAOhD,EAAE4D,GAAF,CAAM,KAAKZ,MAAX,EAAmB,UAAC0C,KAAD,EAAQZ,CAAR,EAAc;AACtC,qBAAO;AACLnD,uBAAO+D,MAAMxC,KADR;AAELC,sBAAMuC,MAAMtB,KAAN,CAAY,OAAKlC,KAAL,CAAWZ,SAAvB,CAFD;AAGL2B,uBAAO,OAAKf,KAAL,CAAWd,WAAX,CAAuBsE,MAAMxC,KAA7B,KAAuC,OAAK3C,UAAL,CAAgBwB,MAAhB,CAAuB+C,CAAvB;AAHzC,eAAP;AAKD,aANM,CAAP;AAOD;;;yCAEca,Q,EAAU;AACvB,iBAAK3C,MAAL,GAAc2C,SAAS/B,GAAT,CAAa,KAAKgC,aAAL,CAAmBtD,IAAnB,CAAwB,IAAxB,CAAb,CAAd;AACA,iBAAKa,IAAL,GAAY,KAAKC,WAAL,CAAiB,KAAKJ,MAAtB,CAAZ;AACA,iBAAKK,MAAL,GAAc,KAAKC,WAAL,CAAiB,KAAKN,MAAtB,CAAd;AACA,iBAAKD,MAAL,CAAY,KAAKI,IAAjB;AACD;;;wCAEa0C,U,EAAY;AACxB,gBAAI7C,SAAS,IAAI9C,UAAJ,CAAe;AAC1B4F,0BAAYD,WAAWC,UADG;AAE1B5C,qBAAO2C,WAAWE;AAFQ,aAAf,CAAb;;AAKA/C,mBAAOgD,SAAP,GAAmBhD,OAAOiD,YAAP,CAAoB,KAAK/D,KAAL,CAAWhB,aAA/B,CAAnB;AACA,mBAAO8B,MAAP;AACD;;;+BAEIkD,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7BlG,sBAAU+F,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B;AACD;;;sCAKWC,O,EAAS;AACnB,gBAAIA,QAAQC,UAAZ,EAAwB;AACtB,mBAAKrE,KAAL,CAAWJ,UAAX,GAAwB,KAAxB;AACA,mBAAKI,KAAL,CAAWH,MAAX,GAAoB,CAAC,wBAAD,EAA2B,0BAA3B,EAAuD,yBAAvD,CAApB;AACD,aAHD,MAGO;AACL,mBAAKG,KAAL,CAAWL,eAAX,GAA6B,KAA7B;AACA,mBAAKK,KAAL,CAAWH,MAAX,GAAoB,CAAC,yBAAD,EAA4B,0BAA5B,EAAwD,wBAAxD,CAApB;AACD;AACD,iBAAKgB,MAAL;AACD;;;6CAEkB;AACjB;AACA;AACA;AACA;AACH;AACA,iBAAKb,KAAL,CAAWH,MAAX,CAAkByE,OAAlB;AACG,iBAAKzD,MAAL;AACD;;;wCAEa0D,e,EAAiB;AAAA;;AAC7B,mBAAO,iBAAS;AACd,qBAAKvE,KAAL,CAAWH,MAAX,CAAkB0E,eAAlB,IAAqCxD,KAArC;AACA,qBAAKF,MAAL;AACD,aAHD;AAID;;;;QA5O+BhD,gB;;;;AAgPlCK,mBAAasG,WAAb,GAA2B,aAA3B","file":"grallama_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport rendering from './rendering';\n\nexport class GraLLAMACtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      legendType: 'Under graph',\n      aliasColors: {},\n      format: 'short',\n      valueName: 'current',\n      strokeWidth: 1,\n      fontSize: '60%',\n\t  combine: {\n\t    threshold: 0.0,\n\t    label: 'Others'\n\t  },\n      tooltipHover: false,\n      colorBackground: true,\n      colorValue: false,\n\t  colors: ['#6ea009', \"#D38E02\", \"#C86501\", \"#BD3D01\", \"#AD0000\"],\n      thresholds: '0,0.2,1,5,99',\n      // colorMap: {\n      //     limits: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      //     colors: ['#6ea009', \"#D9A303\", \"#D38E02\", \"#CE7A02\", \"#C86501\", \"#C35101\",\n      //              \"#BD3D01\", \"#B82800\", \"#B21400\", \"#AD0000\"],\n      // },\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', 'public/plugins/dropbox-grallama-panel/axes_editor.html', 2);\n    this.addEditorTab('Options', 'public/plugins/dropbox-grallama-panel/options_editor.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  changeSeriesColor(series, color) {\n    series.color = color;\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  onRender() {\n    this.data = this.parseSeries(this.series);\n    this.matrix = this.parseMatrix(this.series);\n  }\n\n  parseMatrix(series) {\n      // var colormap = this.panel.colorMap;\n      var hash = {};\n      var srcs = new Set(); // This doesn't seem to be getting used\n      var dsts = new Set();\n      let colorBackground = this.panel.colorBackground;\n      let colorValue = this.panel.colorValue;\n      let thresholds = this.panel.thresholds.split(',').map(function(strVale) {\n        return Number(strVale.trim());\n      });\n\t  // Because `this` is magical and doesn't work in the loop below\n\t  let colors = this.panel.colors\n      hash['data'] = {};\n      hash['cells'] = [];\n      angular.forEach(series, function(datapoint) {\n          var datavalue = Number(datapoint.stats.current).toFixed(1);\n          var [src, dst] = datapoint.label.split('-');\n          var fgColor;\n          var bgColor;\n          srcs.add(src);\n          dsts.add(dst);\n          if (hash['data'][src] === undefined) {\n              hash['data'][src] = {};\n          }\n          if (colorBackground || colorValue) {\n              let color = colors[0]; // Start with the base, and update if greater than thresholds\n              angular.forEach(thresholds, function(limit, i) {\n                if (datavalue >= limit) { color = colors[i+1]; }\n              });\n              if (colorBackground) { bgColor = color; }\n              if (colorValue) { fgColor = color; }\n          }\n          hash['data'][src][dst] = {\n              value: datavalue,\n              style: {\n                \"color\": fgColor,\n                \"background-color\": bgColor,\n              },\n          };\n      });\n\n      // Create the column headings first\n      let row = 1;\n      let col = 1;\n      for (let dst of Array.from(dsts).sort()) {\n        col++;  // Start 1 cell in, like the data\n        hash['cells'].push({\n          value: dst,\n          style: {\n            \"grid-row\": row.toString(),\n            \"grid-column\": col.toString(),\n            // Leave this out for column headers, since we're okay with those stacking a bit\n            // \"white-space\": \"nowrap\",  // Should move this into CSS\n          }\n        });\n      }\n\n      // Add the cells\n      // TODO(dmar): Just save these sorted values\n      for (let src of Array.from(srcs).sort()) {\n        row++;\n        col = 1; // This needs to be reset for each row\n        // Add a cell for the row header\n        hash['cells'].push({\n          value: src,\n          style: {\n            \"grid-row\": row.toString(),\n            \"grid-column\": col.toString(),\n            \"white-space\": \"nowrap\",  // Should move this into CSS\n            \"text-align\": \"right\",  // Should move this into CSS\n          }\n        });\n        for (let dst of Array.from(dsts).sort()) {\n          col++;\n          // Confirm this plays nice if there is no matching entry\n          let cell = Object.assign({}, hash['data'][src][dst]);\n          cell['tooltip'] = this.panel.tooltipHover;\n          cell['src'] = src;\n          cell['dst'] = dst;\n          // If this cell didn't exist, we'd have no style, so ensure that exists\n          if (!('style' in cell)) {\n            cell['style'] = {};\n          }\n          // These only work if they're strings, otherwise they get silently ignored\n          cell['style']['grid-row'] = row.toString();\n          cell['style']['grid-column'] = col.toString();\n          // This is a simple way to stop displaying the text\n          // but if we really wanted to do this, it would be easier\n          // to just not have a value\n          // cell['style']['font-size'] = \"0\";\n          hash['cells'].push(cell)\n        }\n      }\n\n      // Get the unique values and sort\n      hash['dsts'] = Array.from(dsts).sort();\n      return hash;\n  }\n\n  parseSeries(series) {\n    return _.map(this.series, (serie, i) => {\n      return {\n        label: serie.alias,\n        data: serie.stats[this.panel.valueName],\n        color: this.panel.aliasColors[serie.alias] || this.$rootScope.colors[i]\n      };\n    });\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = this.parseSeries(this.series);\n    this.matrix = this.parseMatrix(this.series);\n    this.render(this.data);\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n// Stolen from SingleStat\n// Try to subclass at some point to get this for free\n// I don't think we're actually using this specific option at the moment.\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    // This seems to be designed for only 3\n    // var tmp = this.panel.colors[0];\n    // this.panel.colors[0] = this.panel.colors[2];\n    // this.panel.colors[2] = tmp;\n\t// This is so much cleaner, easier, and scalable\n\tthis.panel.colors.reverse()\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n}\n\nGraLLAMACtrl.templateUrl = 'module.html';\n"]}